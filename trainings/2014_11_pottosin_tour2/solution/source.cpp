#define VERBOSE
#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

#ifndef LOCAL_PROJECT
#   undef VERBOSE
#else
#   include <conio.h>
#endif

using namespace std;

typedef unsigned char      uchar;
typedef unsigned           uint;
typedef long long          llong;
typedef unsigned long long ullong;
typedef long double        ldouble;

struct debug_t {
    template <typename T>
    debug_t& operator<<(const T& value) {
#       ifdef VERBOSE
        cout << value;
#       endif
        return *this;
    }
} debug;

struct local_t {
    template <typename T>
    local_t& operator<<(const T& value) {
#       ifdef LOCAL_PROJECT
        cout << value;
#       endif
        return *this;
    }
} local;


namespace trie {
    using namespace std;

    /*
    template class Node<Key, KeySet, ValueType = void> {
        if (ValueType != void) {
            ValueType value;
        }
        void Clear();
        pair<TrieNode*, bool> Insert(Key);
        pair<TrieNode*, bool> Insert(InputIterator, InputIterator);
        bool Remove(Key);
        bool Remove(InputIterator, InputIterator);
        TrieNode* Get(Key);
        TrieNode* Get(InputIterator, InputIterator);
    }
    */

    /*
    template interface TrieKeySet<Key, Node> {
        void Clear();
        pair<Node*, bool> Insert(Key);
        bool Remove(Key);
        Node* Get(Key);
    }
    */

    template <size_t Size, size_t Offset = 0>
    struct ArrayKeySet {
        template <typename Key, class Node>
        class _Set {
        public:
            _Set() { memset(_edges, 0x00, sizeof _edges); }
            ~_Set() { Clear(); }

            void Clear() {
                for (size_t i = 0; i < Size; i++)
                    if (_edges[i]) {
                        delete _edges[i];
                        _edges[i] = NULL;
                    }
            }

            pair<Node*, bool> Insert(Key key) {
                if (Get(key))
                    return make_pair(Get(key), false);
                return make_pair((_edges[key - Offset] = new Node), true);
            }

            bool Remove(Key key) {
                if (!Get(key))
                    return false;
                delete Get(key);
                _edges[key - Offset] = NULL;
                return true;
            }

            Node* Get(Key key) {
                return _edges[key - Offset];
            }

        private:
            Node* _edges[Size];
        };
    };/*ArrayKeySet*/

    struct MapKeySet {
        template <typename Key, class Node>
        class _Set {
        public:
            ~_Set() { Clear(); }

            void Clear() {
                for (iterator it = _edges.begin(); it != _edges.end(); it++)
                    delete it->second;
                _edges.clear();
            }

            pair<Node*, bool> Insert(Key key) {
                iterator lb = _edges.lower_bound(key);
                if (lb != _edges.end() && !_edges.key_comp()(key, lb->first))
                    return make_pair(lb->second, false);
                Node* node = new Node;
                _edges.insert(lb, make_pair(key, node));
                return make_pair(node, true);
            }

            bool Remove(Key key) {
                iterator it = _edges.find(key);
                if (it == _edges.end())
                    return false;
                delete it->second;
                _edges.erase(it);
                return true;
            }

            Node* Get(Key key) {
                iterator it = _edges.find(key);
                return it != _edges.end() ? it->second : NULL;
            }

        private:
            typedef typename map<Key, Node*>::iterator iterator;

            map<Key, Node*> _edges;
        };
    };/*MapKeySet*/

    template <class Node, class InputIterator>
    pair<Node*, bool> _Insert(Node* node, InputIterator first, InputIterator last) {
        bool inserted = false;
        while (first != last) {
            pair<Node*, bool> p = node->Insert(*first);
            node = p.first;
            inserted = inserted || p.second;
            ++first;
        }
        return make_pair(node, inserted);
    }

    template <typename Key, class Node, class InputIterator>
    bool _Remove(Node* node, InputIterator first, InputIterator last) {
        if (first == last) {
            node->Clear();
            return true;
        }
        Node* prev;
        Key prevKey;
        do {
            prev = node;
            prevKey = *first;
            node = node->Get(prevKey);
            ++first;
        } while (first != last);
        return prev->Remove(prevKey);
    }

    template <class Node, class InputIterator>
    Node* _Get(Node* node, InputIterator first, InputIterator last) {
        while (first != last) {
            node = node->Get(*first);
            if (!node)
                return NULL;
            ++first;
        }
        return node;
    }

    template <typename Key, class KeySet, typename ValueType = void>
    class Node {
    public:
        ValueType value;

        Node() : value() { }

        void Clear() {
            _data.Clear();
            value = ValueType();
        }

        pair<Node*, bool> Insert(Key key) { return _data.Insert(key); }
        bool Remove(Key key) { return _data.Remove(key); }
        Node* Get(Key key) { return _data.Get(key); }

        template <class InputIterator>
        pair<Node*, bool> Insert(InputIterator first, InputIterator last) {
            return _Insert(this, first, last);
        }

        template <class InputIterator>
        bool Remove(InputIterator first, InputIterator last) {
            return _Remove<Key>(this, first, last);
        }

        template <class InputIterator>
        Node* Get(InputIterator first, InputIterator last) {
            return _Get(this, first, last);
        }

    private:
        typename KeySet::template _Set<Key, Node> _data;
    };

    template <typename Key, class KeySet>
    class Node<Key, KeySet, void> {
    public:
        void Clear() { _data.Clear(); }
        pair<Node*, bool> Insert(Key key) { return _data.Insert(key); }
        bool Remove(Key key) { return _data.Remove(key); }
        Node* Get(Key key) { return _data.Get(key); }

        template <class InputIterator>
        pair<Node*, bool> Insert(InputIterator first, InputIterator last) {
            return _Insert(this, first, last);
        }

        template <class InputIterator>
        bool Remove(InputIterator first, InputIterator last) {
            return _Remove<Key>(this, first, last);
        }

        template <class InputIterator>
        Node* Get(InputIterator first, InputIterator last) {
            return _Get(this, first, last);
        }

    private:
        typename KeySet::template _Set<Key, Node> _data;
    };
}/*trie*/

struct TrieData {
    bool final;
    int index;

    TrieData(bool f = false, int index = 0): final(f), index(index) { }
};

typedef trie::Node<uchar, trie::ArrayKeySet<143, 'a'>, TrieData> TrieNode;

/*
#if 1
int enDigraphs[26][26] = {
    { 14, 618, 1295, 808, 73, 201, 698, 87, 584, 13, 262, 2089, 920, 2807, 17, 807, 23, 2370, 1278, 3057, 349, 268, 185, 90, 254, 142, },
    { 793, 134, 15, 27, 579, 7, 3, 9, 793, 12, 4, 513, 12, 12, 687, 5, 0, 449, 106, 26, 426, 8, 6, 0, 53, 0, },
    { 1363, 0, 153, 4, 1246, 0, 1, 1462, 720, 0, 741, 429, 2, 7, 1788, 1, 12, 595, 134, 805, 528, 0, 0, 0, 352, 3, },
    { 423, 57, 32, 125, 1568, 37, 92, 38, 1220, 15, 4, 156, 55, 100, 594, 18, 3, 406, 125, 18, 241, 31, 56, 0, 146, 3, },
    { 1068, 232, 944, 579, 682, 265, 299, 82, 229, 20, 55, 1214, 793, 2735, 283, 626, 52, 5221, 2337, 1450, 237, 199, 221, 335, 149, 39, },
    { 312, 8, 5, 2, 398, 277, 2, 3, 647, 1, 0, 360, 1, 7, 331, 5, 0, 195, 9, 134, 210, 0, 3, 0, 3, 0, },
    { 566, 31, 4, 10, 979, 14, 146, 272, 498, 1, 0, 270, 61, 185, 356, 8, 0, 642, 56, 13, 284, 0, 19, 0, 255, 1, },
    { 979, 51, 11, 13, 1348, 13, 7, 8, 938, 2, 6, 114, 69, 86, 1187, 18, 1, 272, 15, 218, 192, 0, 30, 0, 545, 0, },
    { 1214, 318, 1484, 868, 506, 309, 570, 19, 12, 10, 76, 1331, 596, 4106, 2420, 538, 40, 621, 2668, 2172, 265, 431, 10, 52, 8, 310, },
    { 101, 0, 0, 0, 65, 0, 0, 0, 26, 2, 0, 0, 0, 0, 74, 0, 0, 0, 1, 2, 97, 0, 0, 0, 0, 0, },
    { 161, 41, 11, 11, 602, 16, 4, 34, 326, 2, 10, 96, 22, 76, 61, 23, 0, 36, 90, 25, 31, 4, 34, 0, 40, 0, },
    { 1746, 77, 79, 232, 2239, 96, 64, 20, 2308, 0, 88, 1116, 102, 80, 1473, 85, 3, 15, 96, 262, 500, 81, 42, 0, 335, 1, },
    { 1535, 326, 9, 7, 1466, 18, 1, 9, 1123, 1, 1, 19, 251, 58, 819, 505, 1, 9, 42, 6, 308, 6, 12, 0, 291, 0, },
    { 1016, 60, 964, 1039, 2769, 157, 1573, 58, 1201, 30, 185, 33, 48, 261, 875, 43, 21, 37, 578, 1929, 254, 91, 50, 13, 169, 35, },
    { 352, 383, 813, 554, 144, 156, 821, 55, 322, 18, 172, 1440, 1249, 3913, 718, 1032, 20, 2211, 1099, 910, 835, 274, 412, 201, 90, 47, },
    { 945, 18, 9, 7, 1231, 16, 3, 1021, 736, 4, 9, 544, 20, 36, 912, 233, 0, 841, 225, 299, 264, 0, 15, 0, 149, 0, },
    { 4, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0, },
    { 2489, 238, 347, 505, 2431, 112, 239, 121, 2161, 11, 208, 144, 437, 325, 2203, 240, 11, 400, 431, 705, 474, 120, 62, 0, 675, 7, },
    { 681, 34, 684, 10, 1209, 35, 18, 921, 1501, 5, 173, 164, 690, 256, 619, 620, 62, 14, 1779, 2604, 552, 4, 112, 0, 197, 2, },
    { 1474, 61, 172, 11, 2851, 53, 18, 1196, 3529, 3, 3, 183, 84, 87, 1642, 23, 0, 1437, 120, 448, 521, 1, 86, 0, 912, 36, },
    { 304, 263, 316, 207, 258, 96, 186, 2, 278, 7, 37, 770, 764, 825, 68, 271, 1, 1024, 907, 664, 3, 30, 2, 23, 8, 17, },
    { 363, 0, 0, 0, 898, 0, 0, 0, 507, 0, 0, 2, 0, 2, 163, 0, 0, 5, 0, 0, 37, 3, 0, 0, 15, 0, },
    { 410, 37, 5, 21, 307, 17, 5, 129, 239, 1, 15, 51, 14, 93, 367, 9, 0, 61, 40, 14, 6, 0, 10, 0, 4, 0, },
    { 69, 2, 32, 0, 56, 4, 1, 14, 164, 0, 0, 3, 2, 1, 52, 69, 1, 0, 3, 70, 24, 1, 3, 0, 53, 0, },
    { 151, 58, 199, 96, 126, 14, 53, 20, 46, 0, 1, 193, 215, 146, 130, 228, 1, 135, 239, 176, 10, 3, 27, 24, 0, 4, },
    { 250, 2, 0, 1, 151, 0, 1, 1, 98, 0, 0, 16, 0, 2, 119, 3, 0, 0, 1, 1, 9, 2, 2, 0, 25, 40, },
};
int ruDigraphs[80][80] = {
    { 0, 316, 659, 319, 562, 57, 195, 524, 51, 166, 543, 1090, 547, 2251, 13, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1212, 764, 1299, 81, 144, 123, 452, 216, 146, 56, 0, 0, 0, 16, 28, 173, },
    { 476, 17, 14, 1, 4, 407, 14, 4, 336, 0, 37, 266, 16, 62, 533, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 46, 5, 227, 1, 7, 6, 8, 4, 30, 25, 70, 17, 8, 25, 18, },
    { 1073, 5, 8, 2, 22, 925, 1, 57, 612, 0, 295, 171, 20, 185, 1519, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 78, 113, 55, 1, 5, 5, 23, 16, 42, 1, 219, 39, 2, 2, 86, },
    { 482, 2, 16, 4, 1, 221, 2, 1, 297, 0, 9, 162, 21, 72, 651, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 423, 6, 1, 138, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 0, 0, },
    { 565, 10, 113, 18, 21, 883, 59, 21, 625, 0, 145, 48, 29, 201, 723, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 141, 11, 237, 2, 6, 12, 37, 18, 0, 10, 68, 67, 3, 18, 28, },
    { 61, 161, 399, 194, 666, 69, 158, 340, 35, 264, 614, 1348, 437, 2541, 146, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1974, 860, 868, 57, 80, 112, 458, 228, 109, 60, 0, 0, 0, 4, 0, 65, },
    { 190, 13, 1, 2, 111, 383, 7, 1, 240, 0, 94, 5, 7, 97, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 40, 0, 0, 0, 3, 0, 0, 0, 0, 16, 1, 2, 0, },
    { 901, 53, 202, 54, 163, 166, 12, 8, 227, 0, 55, 62, 288, 217, 229, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 2, 68, 1, 0, 0, 14, 0, 0, 9, 53, 26, 1, 5, 29, },
    { 214, 118, 517, 189, 305, 2267, 75, 713, 10, 163, 1731, 440, 399, 1425, 310, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 890, 883, 29, 118, 89, 458, 254, 87, 102, 0, 0, 0, 6, 3, 1105, },
    { 0, 10, 7, 4, 23, 5, 0, 6, 3, 0, 108, 20, 25, 79, 16, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 95, 29, 0, 8, 9, 11, 11, 6, 8, 0, 0, 0, 0, 0, 2, },
    { 3374, 4, 86, 1, 2, 144, 0, 21, 327, 0, 26, 326, 7, 51, 1433, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 486, 200, 337, 392, 1, 3, 83, 3, 1, 0, 0, 1, 4, 1, 8, 0, },
    { 877, 15, 14, 24, 35, 1315, 17, 4, 1129, 0, 201, 169, 16, 48, 1146, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 37, 250, 6, 6, 1, 25, 4, 3, 0, 77, 1408, 0, 196, 272, },
    { 879, 89, 9, 9, 2, 804, 2, 8, 509, 0, 66, 64, 88, 107, 848, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 32, 7, 195, 17, 2, 0, 12, 3, 16, 0, 108, 13, 4, 2, 56, },
    { 1372, 4, 35, 143, 271, 1049, 18, 37, 3399, 0, 420, 1, 1, 500, 1927, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 274, 669, 91, 60, 12, 118, 80, 17, 27, 4, 130, 287, 4, 10, 189, },
    { 32, 704, 1393, 562, 1033, 167, 285, 401, 123, 223, 964, 1358, 759, 1218, 110, 665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1729, 2379, 1027, 74, 154, 156, 74, 433, 121, 57, 0, 0, 0, 24, 4, 62, },
    { 651, 0, 1, 0, 1, 749, 0, 0, 417, 0, 51, 377, 3, 37, 1523, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1310, 62, 77, 220, 2, 0, 10, 25, 5, 2, 0, 44, 34, 3, 4, 34, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 2279, 76, 95, 128, 148, 1728, 88, 26, 1219, 0, 260, 51, 215, 227, 2083, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 179, 350, 498, 34, 61, 33, 50, 82, 27, 0, 160, 159, 8, 46, 177, },
    { 477, 34, 186, 13, 12, 495, 3, 2, 480, 0, 532, 320, 134, 176, 661, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 314, 3870, 256, 27, 49, 46, 51, 15, 2, 10, 71, 74, 4, 11, 47, },
    { 1136, 23, 740, 9, 27, 1493, 3, 7, 1087, 0, 309, 71, 39, 276, 1329, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1096, 92, 36, 379, 8, 5, 10, 74, 4, 7, 3, 111, 1472, 6, 41, 84, },
    { 67, 223, 69, 129, 246, 14, 150, 110, 13, 16, 231, 342, 221, 234, 6, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450, 343, 236, 4, 24, 118, 18, 181, 223, 48, 0, 0, 0, 9, 20, 9, },
    { 152, 1, 0, 1, 0, 166, 0, 0, 286, 0, 1, 59, 4, 3, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 4, 42, 50, 18, 0, 0, 2, 3, 0, 0, 1, 5, 3, 11, 3, },
    { 231, 1, 38, 3, 2, 20, 0, 1, 112, 0, 0, 66, 19, 41, 316, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 7, 32, 40, 0, 2, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, },
    { 391, 2, 20, 2, 2, 255, 0, 3, 834, 0, 13, 4, 4, 2, 35, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 4, 6, 0, 1, 4, 0, 1, 0, 0, 17, 0, 2, 0, 0, },
    { 266, 2, 3, 0, 0, 553, 0, 0, 456, 0, 345, 14, 7, 193, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 27, 80, 1, 1, 0, 1, 3, 0, 0, 0, 24, 0, 0, 0, },
    { 214, 2, 11, 0, 0, 274, 0, 0, 176, 0, 278, 60, 15, 72, 62, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 74, 31, 0, 1, 1, 0, 0, 0, 0, 0, 18, 0, 4, 0, },
    { 61, 0, 1, 0, 0, 287, 0, 0, 255, 0, 0, 0, 1, 14, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 13, },
    { 0, 39, 119, 22, 21, 19, 24, 10, 1, 109, 48, 76, 15, 51, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 98, 77, 1, 0, 26, 2, 45, 108, 9, 0, 0, 0, 0, 0, 3, },
    { 0, 29, 15, 14, 25, 277, 4, 17, 8, 0, 87, 0, 48, 325, 22, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 78, 0, 11, 12, 19, 29, 18, 32, 0, 0, 0, 1, 21, 76, },
    { 0, 4, 10, 6, 3, 0, 0, 3, 0, 2, 108, 78, 29, 47, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 40, 43, 0, 14, 2, 0, 0, 5, 0, 0, 0, 0, 1, 0, 1, },
    { 5, 48, 6, 15, 35, 1, 6, 23, 4, 3, 26, 21, 29, 27, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 20, 32, 0, 5, 7, 12, 33, 24, 48, 0, 0, 0, 0, 0, 0, },
    { 0, 21, 23, 51, 94, 12, 59, 80, 5, 21, 88, 17, 18, 173, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 49, 189, 2, 0, 11, 48, 43, 18, 32, 0, 0, 0, 0, 7, 2, },
};
int trDigraphs[26][26] = {
    { 128, 744, 930, 706, 21, 629, 861, 1005, 176, 128, 5521, 3652, 2969, 4854, 15, 758, 0, 3708, 3198, 2481, 24, 734, 0, 0, 1345, 1012, },
    { 1793, 38, 33, 26, 1157, 0, 1, 2, 914, 12, 23, 101, 5, 15, 644, 0, 0, 173, 6, 6, 723, 2, 0, 0, 22, 30, },
    { 1427, 20, 63, 16, 1439, 1, 25, 17, 2014, 0, 209, 473, 96, 25, 241, 4, 0, 71, 61, 44, 1067, 11, 0, 0, 8, 11, },
    { 1474, 22, 9, 121, 1594, 2, 10, 3, 1489, 0, 37, 18, 49, 27, 659, 0, 0, 409, 74, 1, 916, 11, 0, 0, 78, 20, },
    { 59, 333, 891, 517, 21, 388, 178, 265, 53, 42, 4110, 2633, 2206, 3408, 99, 322, 1, 3112, 2279, 2420, 8, 791, 0, 1, 661, 631, },
    { 544, 3, 36, 4, 530, 55, 3, 11, 569, 0, 56, 234, 3, 30, 261, 0, 0, 169, 116, 149, 144, 1, 0, 0, 25, 18, },
    { 947, 23, 43, 88, 865, 8, 15, 5, 636, 0, 18, 251, 93, 99, 601, 6, 0, 403, 44, 47, 950, 2, 0, 0, 14, 59, },
    { 1532, 31, 48, 28, 333, 13, 2, 37, 501, 0, 33, 188, 74, 54, 176, 20, 0, 179, 98, 146, 307, 36, 0, 0, 25, 46, },
    { 93, 255, 591, 344, 12, 432, 149, 293, 45, 22, 3283, 2893, 993, 1817, 21, 357, 0, 1974, 1667, 1070, 13, 191, 0, 0, 1128, 1545, },
    { 36, 0, 8, 10, 124, 0, 0, 0, 217, 0, 0, 19, 9, 0, 17, 0, 0, 0, 2, 0, 23, 0, 0, 0, 7, 0, },
    { 3380, 48, 398, 40, 1209, 13, 42, 19, 950, 1, 164, 1724, 252, 168, 1352, 38, 0, 497, 867, 460, 1440, 67, 0, 0, 99, 77, },
    { 5399, 103, 333, 301, 4576, 57, 286, 54, 3978, 6, 1246, 1127, 1318, 55, 608, 85, 0, 5, 185, 420, 1722, 87, 0, 0, 152, 14, },
    { 7938, 264, 216, 57, 6496, 11, 44, 37, 927, 0, 61, 655, 84, 39, 331, 145, 0, 92, 398, 34, 1468, 3, 0, 0, 44, 87, },
    { 1356, 67, 788, 1093, 1414, 88, 430, 39, 993, 29, 302, 1126, 2217, 97, 316, 16, 0, 43, 631, 860, 416, 30, 0, 0, 158, 93, },
    { 15, 161, 201, 205, 13, 136, 558, 62, 43, 183, 680, 1263, 568, 1497, 11, 455, 0, 1458, 661, 557, 1, 181, 2, 0, 356, 647, },
    { 1031, 4, 100, 12, 575, 1, 7, 48, 387, 0, 71, 384, 55, 28, 374, 19, 0, 293, 185, 129, 306, 0, 0, 0, 18, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, },
    { 2394, 201, 501, 559, 1740, 93, 454, 84, 1738, 26, 512, 1271, 2021, 239, 691, 180, 0, 108, 555, 884, 1049, 71, 0, 0, 132, 51, },
    { 2466, 116, 157, 62, 1833, 76, 111, 75, 2285, 1, 720, 783, 1588, 289, 663, 207, 0, 259, 220, 1920, 1349, 86, 0, 0, 301, 425, },
    { 2219, 46, 291, 2, 2116, 24, 39, 57, 1919, 0, 233, 1180, 1380, 69, 923, 38, 0, 1114, 379, 173, 1211, 11, 0, 0, 29, 13, },
    { 130, 148, 499, 196, 43, 192, 192, 254, 21, 24, 1634, 1832, 1155, 1240, 17, 171, 0, 2327, 1330, 902, 13, 220, 0, 0, 319, 940, },
    { 852, 7, 57, 55, 664, 2, 22, 22, 457, 0, 45, 146, 46, 12, 51, 0, 0, 232, 68, 9, 286, 81, 0, 0, 17, 35, },
    { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, },
    { 1813, 35, 66, 117, 1137, 27, 102, 31, 354, 0, 98, 316, 136, 127, 725, 15, 0, 237, 174, 81, 695, 42, 0, 0, 71, 10, },
    { 726, 55, 148, 76, 661, 3, 185, 21, 469, 0, 75, 1073, 383, 47, 139, 7, 0, 44, 55, 18, 239, 16, 0, 0, 63, 42, },
};
#endif
*/

enum {
    LANG_EN,
    LANG_RU,
    LANG_TR,
};
const uchar A[ ] = { 'a', 160, 'a' };
const uchar Z[ ] = { 'z', 239, 'z' };

struct Pos {
    int i, j;
    Pos(int i = 0, int j = 0) : i(i), j(j) { }
};

struct Choice {
    int prio;
    char dir;
    Pos p;

    Choice(int prio = 0, char dir = '\0', int i = 0, int j = 0): prio(prio), dir(dir), p(i, j) { }

    bool operator<(const Choice& c) const {
        return prio < c.prio;
    }

    bool operator==(const Choice& c) const {
        return prio == c.prio;
    }
};

struct DfsData {
    uchar character;
    char dir;

    DfsData(uchar character = '\0', char dir = '\0'): character(character), dir(dir) { }
};

vector<string> dict;

struct WordCandidate {
    int wordIndex;
    int emptyFilled;

    WordCandidate(int w = -1, int f = 0) : wordIndex(w), emptyFilled(f) { }

    bool operator<(const WordCandidate& w) const {
        return make_pair(emptyFilled, -(int)dict[wordIndex].length()) < make_pair(w.emptyFilled, -(int)dict[w.wordIndex].length());
    }

    bool operator==(const WordCandidate& w) const {
        return emptyFilled == w.emptyFilled && wordIndex == w.wordIndex;
    }
};

int curLang;
vector<vector<int>> digraphs;
int n;
uchar field[11][11] = { };
int emptyPoints[11][11] = { };
bool used[11][11] = { };
TrieNode root;
int startI, startJ;
int bestI, bestJ;
WordCandidate bestCandidate;
vector<DfsData> dfsStack;
vector<DfsData> bestStack;
int dfsLimit;

//const int DFS_MAX = INT_MAX;

void RecalcEmptyPoints() {
    static bool used[11][11];
    static const int deltas[ ][4] = {
        { -1, 0 },
        { 1, 0 },
        { 0, -1 },
        { 0, 1 },
    };
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            memset(used, 0x00, sizeof used);
            queue<Pos> q;
            q.emplace(i, j);
            while (!q.empty()) {
                auto p = q.front();
                q.pop();
                if (p.i < 0 || p.i >= n || p.j < 0 || p.j >= n)
                    continue;
                if (field[p.i][p.j]) {
                    emptyPoints[i][j] = abs(i - p.i) + abs(j - p.j);
                    break;
                }
                for (const auto& d: deltas)
                    q.emplace(p.i + d[0], p.j + d[1]);
            }
        }
}

void Dfs(const Pos& p, int passed, bool foundEmpty, int len, TrieNode* node, int emptyFilled) {
    //passed < 0 if we are passing empty cells.
    if (passed < -3 || (!foundEmpty && passed > 4) || p.i < 0 || p.i >= n || p.j < 0 || p.j >= n || used[p.i][p.j])
        return;
    used[p.i][p.j] = true;
    //if (dfsLimit++ > DFS_MAX)
        //return;
    if (node->value.final && foundEmpty) {
        WordCandidate cand(node->value.index, emptyFilled);
        if (bestCandidate.wordIndex == -1 || cand < bestCandidate) {
            string temp = dict[cand.wordIndex];
            bestCandidate = cand;
            bestStack = dfsStack;
            bestI = startI;
            bestJ = startJ;
        }
    }
    vector<Choice> next;
    next.reserve(4);
    static const int deltas[ ][4] = {
        { -1, 0 },
        { 1, 0 },
        { 0, -1 },
        { 0, 1 },
    };
    static const char dirs[ ] = {
        'u',
        'd',
        'l',
        'r',
    };
    for (int i = 0; i < 4; i++) {
        const auto& d = deltas[i];
        int nextI = p.i + d[0];
        int nextJ = p.j + d[1];
        if (nextI < 0 || nextI >= n || nextJ < 0 || nextJ >= n)
            continue;
        int prio;
        if (field[nextI][nextJ])
            if (field[p.i][p.j]) {
                prio = -digraphs[(uchar)field[p.i][p.j]][(uchar)field[nextI][nextJ]];
                if (!prio)
                    continue;
            } else
                prio = INT_MIN;
        else
            prio = 30 - emptyPoints[nextI][nextJ];
        next.emplace_back(prio, dirs[i], p.i + d[0], p.j + d[1]);
    }
    sort(begin(next), end(next));
    for (const auto& ch: next) {
        int nextPassed;
        if (field[ch.p.i][ch.p.j]) {
            auto nextNode = node->Get(field[ch.p.i][ch.p.j]);
            if (!nextNode)
                continue;
            if (passed > 0)
                nextPassed = passed + 1;
            else
                nextPassed = 1;
            dfsStack.emplace_back(field[ch.p.i][ch.p.j], ch.dir);
            Dfs(ch.p, nextPassed, foundEmpty, len + 1, nextNode, emptyFilled);
            dfsStack.pop_back();
            //if (dfsLimit > DFS_MAX)
                //return;
        } else {
            if (passed < 0)
                nextPassed = passed - 1;
            else
                nextPassed = -1;
            for (uchar nextC = A[curLang]; nextC <= Z[curLang]; nextC++) {
                auto nextNode = node->Get(nextC);
                if (nextNode) {
                    dfsStack.emplace_back(nextC, ch.dir);
                    Dfs(ch.p, nextPassed, true, len + 1, nextNode, emptyFilled + 1);
                    dfsStack.pop_back();
                    //if (dfsLimit > DFS_MAX)
                        //return;
                }
            }
        }
    }
}

int main() {
#   ifdef LOCAL_PROJECT
        freopen("Anton3_sample.in", "r", stdin);
        auto benchmark = clock();
#   else
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
#   endif
    int i;
    string s;
    cin >> s;
    curLang = s[0] == 'e' ? LANG_EN : s[0] == 'r' ? LANG_RU : LANG_TR;
    digraphs.resize(256, vector<int>(256));
    /*
    switch (curLang) {
        case 0:
            for (const auto& row : enDigraphs) {
                vector<int> v;
                for (int freq: row)
                    v.push_back(freq);
                digraphs.push_back(move(v));
            }
            break;

        case 1:
            for (const auto& row: ruDigraphs) {
                vector<int> v;
                for (int freq: row)
                    v.push_back(freq);
                digraphs.push_back(move(v));
            }
            break;

        case 2:
            for (const auto& row: trDigraphs) {
                vector<int> v;
                for (int freq: row)
                    v.push_back(freq);
                digraphs.push_back(move(v));
            }
            break;
    }
    */
    string middle;
    cin >> middle;
    n = middle.length();
    local << n << '\n';
    for (i = 0; i < n; i++)
        field[n >> 1][i] = middle[i];
    while (cin >> s) {
        basic_string<uchar> bs(begin(s), end(s));
        for (uchar& c: bs)
            if (c & 1U << 31)
                c += 256;
        []() { }();
        root.Insert(begin(bs), end(bs)).first->value = TrieData(true, dict.size());
        dict.push_back(s);
        for (i = 1; i < (int)s.length(); i++) {
            auto x = bs[i - 1];
            auto y = bs[i];
            digraphs[bs[i - 1]][bs[i]]++;
        }
    }
    root.value.final = false;//Removing empty string.
    auto node = root.Get(begin(middle), end(middle));
    if (node)
        node->value.final = false;
    local << "Input parsed\n";
#   ifdef LOCAL_PROJECT
        cout << flush;
#   endif

    ostringstream out;
    int m, score = 0;
    for (m = 0; ; m++) {
        RecalcEmptyPoints();
        bestCandidate = WordCandidate();
        //dfsLimit = n >= 10 ? 0 : INT_MIN;
        for (startI = 0; startI < n; startI++) {
            for (startJ = 0; startJ < n; startJ++) {
                memset(used, 0x00, sizeof used);
                if (field[startI][startJ]) {
                    node = root.Get(field[startI][startJ]);
                    if (node) {
                        dfsStack.emplace_back(field[startI][startJ], ' ');
                        Dfs(Pos(startI, startJ), 1, false, 1, node, 0);
                        dfsStack.pop_back();
                    }
                } else {
                    for (uchar nextC = A[curLang]; nextC <= Z[curLang]; nextC++) {
                        node = root.Get(nextC);
                        if (node) {
                            dfsStack.emplace_back(nextC, ' ');
                            Dfs(Pos(startI, startJ), -1, true, 1, node, 1);
                            dfsStack.pop_back();
                        }
                    }
                }
            }
        }
        if (bestCandidate.wordIndex == -1)
            break;
        score += bestStack.size();
        int curI = bestI, curJ = bestJ;
        bool outFirstEmpty = !!field[curI][curJ];
        if (!outFirstEmpty)
            out << curI + 1 << ' ' << curJ + 1 << ' ' << (char)bestStack[0].character << ' ';
        field[curI][curJ] = bestStack[0].character;
        for (i = 1; i < (int)bestStack.size(); i++) {
            const auto& d = bestStack[i];
            if (d.dir == 'u')
                curI--;
            else if (d.dir == 'd')
                curI++;
            else if (d.dir == 'l')
                curJ--;
            else
                curJ++;
            if (outFirstEmpty && !field[curI][curJ]) {
                out << curI + 1 << ' ' << curJ + 1 << ' ' << (char)d.character << ' ';
                outFirstEmpty = false;
            }
            field[curI][curJ] = d.character;
        }
        for (const auto& d : bestStack)
            out << (char)d.character;
        out << ' ' << bestI + 1 << ' ' << bestJ + 1;
        for (const auto& d: bestStack)
            out << d.dir;
        out << '\n';
        root.Get(begin(dict[bestCandidate.wordIndex]), end(dict[bestCandidate.wordIndex]))->value.final = false;
    }
    cout << m << '\n' << out.str();
    local << score << '\n' << score * 1000 / (n * n) << '\n';
#   ifdef LOCAL_PROJECT
        debug << double(clock() - benchmark) / CLOCKS_PER_SEC << " sec\n";
        _getch();
#   endif
    return 0;
}